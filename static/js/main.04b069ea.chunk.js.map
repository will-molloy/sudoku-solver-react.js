{"version":3,"sources":["components/Solver.js","components/Board.js","components/SudokuSolver.js","App.js","serviceWorker.js","index.js"],"names":["initialBoard","solve","board","setBoard","a","sleep","boardCopy","row","col","num","isValidMove","i","Math","floor","Promise","resolve","setTimeout","Board","border","map","key","cell","j","SudokuSolver","useState","onClick","console","log","then","b","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.04b069ea.chunk.js","sourcesContent":["export function initialBoard() {\n  return [\n    [5, 3, 0, 0, 7, 0, 0, 0, 0],\n    [6, 0, 0, 1, 9, 5, 0, 0, 0],\n    [0, 9, 8, 0, 0, 0, 0, 6, 0],\n    [8, 0, 0, 0, 6, 0, 0, 0, 3],\n    [4, 0, 0, 8, 0, 3, 0, 0, 1],\n    [7, 0, 0, 0, 2, 0, 0, 0, 6],\n    [0, 6, 0, 0, 0, 0, 2, 8, 0],\n    [0, 0, 0, 4, 1, 9, 0, 0, 5],\n    [0, 0, 0, 0, 8, 0, 0, 7, 9],\n  ];\n}\n\n/**\n * Solves a Sudoku board represented by a 2d array of integers.\n *\n * @param board board to solve\n * @param setBoard `useState` function to update the boards state\n * @returns {Promise<boolean>} `true` if the board is solved\n */\nexport async function solve(board, setBoard) {\n  await sleep();\n  const boardCopy = [...board];\n  for (let row = 0; row < 9; row++) {\n    for (let col = 0; col < 9; col++) {\n      if (boardCopy[row][col] !== 0) {\n        // can't change filled cells\n        continue;\n      }\n      // try 1 to 9 for the empty cell\n      for (let num = 1; num <= 9; num++) {\n        if (isValidMove(boardCopy, row, col, num)) {\n          // valid move, try it\n          boardCopy[row][col] = num;\n          setBoard(boardCopy);\n          if (await solve(board, setBoard)) {\n            return true;\n          } else {\n            // didn't solve with this move, backtrack\n            boardCopy[row][col] = 0;\n            setBoard(boardCopy);\n          }\n        }\n      }\n      // nothing worked for empty cell, must have deprived boards solution with a previous move\n      return false;\n    }\n  }\n  // all cells filled\n  return true;\n}\n\nfunction isValidMove(board, row, col, num) {\n  for (let i = 0; i < 9; i++) {\n    // check row\n    if (board[i][col] === num) {\n      return false;\n    }\n    // check col\n    if (board[row][i] === num) {\n      return false;\n    }\n    // check 3x3 square\n    if (\n      board[3 * Math.floor(row / 3) + Math.floor(i / 3)][3 * Math.floor(col / 3) + (i % 3)] === num\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction sleep() {\n  return new Promise((resolve) => setTimeout(resolve, 0));\n}\n","import React from 'react';\n\nconst Board = ({ board }) => {\n  return (\n    <table border=\"1\">\n      <tbody>\n        {board.map((row, i) => {\n          return (\n            <tr key={i}>\n              {row.map((cell, j) => (\n                <td key={`${i}-${j}`}>{cell === 0 ? '' : cell}</td>\n              ))}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Board;\n","import React, { useState } from 'react';\nimport { initialBoard, solve } from './Solver';\nimport Board from './Board';\n\nconst SudokuSolver = () => {\n  const [board, setBoard] = useState(initialBoard);\n\n  const solveOnClick = () => {\n    console.log('Solving...');\n    solve(board, setBoard).then((b) => console.log(b ? 'Solved.' : 'Unsolveable.'));\n  };\n\n  const resetOnClick = () => {\n    console.log('Resetting...');\n    setBoard(initialBoard);\n    console.log('Reset.');\n  };\n\n  return (\n    <div>\n      <Board board={board} />\n      <button onClick={solveOnClick}>Solve</button>\n      <button onClick={resetOnClick}>Reset</button>\n    </div>\n  );\n};\n\nexport default SudokuSolver;\n","import React from 'react';\nimport './App.css';\nimport SudokuSolver from './components/SudokuSolver';\n\nconst App = () => {\n  return <SudokuSolver />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}