{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","board","initialBoard","this","border","map","row","i","key","cell","onClick","console","log","solve","then","b","reset","setState","sleep","col","num","isValidMove","ms","Promise","resolve","setTimeout","Math","floor","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uRA2HeA,G,wDAvHb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAOH,EAAII,gBAFT,E,qDAKT,IAAD,OACDD,EAAQE,KAAKH,MAAMC,MACzB,OACE,6BACE,2BAAOG,OAAO,KACZ,+BACGH,EAAMI,KAAI,SAACC,EAAKC,GACf,OACE,wBAAIC,IAAKD,GACND,EAAID,KAAI,SAACI,GAAD,OACP,4BAAc,IAATA,EAAa,GAAKA,YAOnC,4BACEC,QAAS,WACPC,QAAQC,IAAI,cACZ,EAAKC,QAAQC,MAAK,SAACC,GAAD,OAAQA,EAAIJ,QAAQC,IAAI,WAAa,UAH3D,SAQA,4BACEF,QAAS,WACPC,QAAQC,IAAI,gBACZ,EAAKI,QACLL,QAAQC,IAAI,YAJhB,Y,8BA4BJT,KAAKc,SAAS,CAAEhB,MAAOH,EAAII,mB,oKAIrBC,KAAKe,MAAM,G,OACXjB,EAAQE,KAAKH,MAAMC,MAChBK,EAAM,E,YAAGA,EAAM,G,iBACba,EAAM,E,YAAGA,EAAM,G,oBACE,IAApBlB,EAAMK,GAAKa,G,sDAKNC,EAAM,E,aAAGA,GAAO,G,qBACnBtB,EAAIuB,YAAYpB,EAAOK,EAAKa,EAAKC,G,wBAEnCnB,EAAMK,GAAKa,GAAOC,EAClBjB,KAAKc,SAAS,CAAEhB,MAAOA,I,UACbE,KAAKU,Q,8DACN,G,QAGPZ,EAAMK,GAAKa,GAAO,EAClBhB,KAAKc,SAAS,CAAEhB,MAAOA,I,QAVDmB,I,kDAerB,G,QArBkBD,I,uBADFb,I,iDA0BpB,G,mIAwBHgB,GACJ,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,S,sCAvEpD,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,M,kCAwCVrB,EAAOK,EAAKa,EAAKC,GAClC,IAAK,IAAIb,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1B,GAAIN,EAAMM,GAAGY,KAASC,EACpB,OAAO,EAGT,GAAInB,EAAMK,GAAKC,KAAOa,EACpB,OAAO,EAGT,GACEnB,EAAM,EAAIyB,KAAKC,MAAMrB,EAAM,GAAKoB,KAAKC,MAAMpB,EAAI,IAAI,EAAImB,KAAKC,MAAMR,EAAM,GAAMZ,EAAI,KAClFa,EAEA,OAAO,EAGX,OAAO,M,GAhHOQ,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAC2B,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.6d583d08.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { board: App.initialBoard() };\n  }\n\n  render() {\n    const board = this.state.board;\n    return (\n      <div>\n        <table border=\"1\">\n          <tbody>\n            {board.map((row, i) => {\n              return (\n                <tr key={i}>\n                  {row.map((cell) => (\n                    <td>{cell === 0 ? '' : cell}</td>\n                  ))}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n        <button\n          onClick={() => {\n            console.log('Solving...');\n            this.solve().then((b) => (b ? console.log('Solved.') : null));\n          }}\n        >\n          Solve\n        </button>\n        <button\n          onClick={() => {\n            console.log('Resetting...');\n            this.reset();\n            console.log('Reset.');\n          }}\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n\n  static initialBoard() {\n    return [\n      [5, 3, 0, 0, 7, 0, 0, 0, 0],\n      [6, 0, 0, 1, 9, 5, 0, 0, 0],\n      [0, 9, 8, 0, 0, 0, 0, 6, 0],\n      [8, 0, 0, 0, 6, 0, 0, 0, 3],\n      [4, 0, 0, 8, 0, 3, 0, 0, 1],\n      [7, 0, 0, 0, 2, 0, 0, 0, 6],\n      [0, 6, 0, 0, 0, 0, 2, 8, 0],\n      [0, 0, 0, 4, 1, 9, 0, 0, 5],\n      [0, 0, 0, 0, 8, 0, 0, 7, 9],\n    ];\n  }\n\n  reset() {\n    this.setState({ board: App.initialBoard() });\n  }\n\n  async solve() {\n    await this.sleep(0);\n    const board = this.state.board;\n    for (let row = 0; row < 9; row++) {\n      for (let col = 0; col < 9; col++) {\n        if (board[row][col] !== 0) {\n          // can't change filled cells\n          continue;\n        }\n        // try 1 to 9 for the empty cell\n        for (let num = 1; num <= 9; num++) {\n          if (App.isValidMove(board, row, col, num)) {\n            // valid move, try it\n            board[row][col] = num;\n            this.setState({ board: board });\n            if (await this.solve()) {\n              return true;\n            } else {\n              // didn't solve with this move, backtrack\n              board[row][col] = 0;\n              this.setState({ board: board });\n            }\n          }\n        }\n        // nothing worked for empty cell, must have deprived boards solution with a previous move\n        return false;\n      }\n    }\n    // all cells filled\n    return true;\n  }\n\n  static isValidMove(board, row, col, num) {\n    for (let i = 0; i < 9; i++) {\n      // check row\n      if (board[i][col] === num) {\n        return false;\n      }\n      // check col\n      if (board[row][i] === num) {\n        return false;\n      }\n      // check 3x3 square\n      if (\n        board[3 * Math.floor(row / 3) + Math.floor(i / 3)][3 * Math.floor(col / 3) + (i % 3)] ===\n        num\n      ) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}